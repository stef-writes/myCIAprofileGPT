def generate_comprehensive_report(profile: PsychologicalProfile) -> str:
    """Generate a comprehensive report including all analysis dimensions."""
    report = f"""# Comprehensive Psychological Profile Report

## Executive Summary
{profile.overall_assessment}

## Core Personality Analysis
### Personality Traits
{format_traits(profile.personality_traits)}

### Emotional Profile
{format_emotional_states(profile.emotional_states)}

### Cognitive Patterns
{format_cognitive_patterns(profile.cognitive_patterns)}

## Communication & Decision Making
### Communication Style
- Primary Style: {profile.communication_style.primary_style}
- Secondary Style: {profile.communication_style.secondary_style}
- Strengths: {', '.join(profile.communication_style.communication_strengths)}
- Challenges: {', '.join(profile.communication_style.communication_challenges)}
- Adaptation Capacity: {profile.communication_style.adaptation_capacity:.2f}

### Decision Making Patterns
- Primary Approach: {profile.decision_making.primary_approach}
- Decision Speed: {profile.decision_making.decision_speed:.2f}
- Risk Tolerance: {profile.decision_making.risk_tolerance:.2f}
- Information Gathering: {profile.decision_making.information_gathering_style}
- Common Biases: {', '.join(profile.decision_making.common_biases)}

## Stress & Leadership
### Stress Response Profile
- Primary Coping Mechanism: {profile.stress_response.primary_coping_mechanism}
- Stress Threshold: {profile.stress_response.stress_threshold:.2f}
- Recovery Speed: {profile.stress_response.recovery_speed:.2f}
- Stress Indicators: {', '.join(profile.stress_response.stress_indicators)}
- Coping Strategies: {', '.join(profile.stress_response.coping_strategies)}

### Leadership Assessment
- Leadership Style: {profile.leadership_potential.leadership_style}
- Influence Capacity: {profile.leadership_potential.influence_capacity:.2f}
- Vision Development: {profile.leadership_potential.vision_development:.2f}
- Team Building: {profile.leadership_potential.team_building_ability:.2f}
- Strategic Thinking: {profile.leadership_potential.strategic_thinking:.2f}
- Key Strengths: {', '.join(profile.leadership_potential.key_strengths)}
- Development Areas: {', '.join(profile.leadership_potential.development_areas)}

## Team Dynamics
### Team Compatibility
- Preferred Role: {profile.team_dynamics.preferred_role}
- Collaboration Style: {profile.team_dynamics.collaboration_style}
- Conflict Handling: {profile.team_dynamics.conflict_handling}
- Team Contributions: {', '.join(profile.team_dynamics.team_contribution)}
- Ideal Team Composition: {', '.join(profile.team_dynamics.ideal_team_composition)}

## Writing & Communication Analysis
### Writing Style
{format_writing_style(profile.writing_style)}

### Linguistic Markers
{format_linguistic_markers(profile.linguistic_markers)}

## Security Profile
{format_security_profile(profile.security_profile) if profile.security_profile else "No security profile available"}

## Confidence Assessment
Overall Confidence Score: {profile.confidence_score:.2f}

### Potential Biases
{format_list(profile.potential_biases)}

### Analysis Limitations
{format_list(profile.limitations)}

## Evidence Base
All assessments are based on the following evidence:
{format_evidence(profile)}

---
Report generated by CIABot
Confidence Score: {profile.confidence_score:.2f}
"""

    return report

def format_evidence(profile: PsychologicalProfile) -> str:
    """Format all evidence from the profile into a structured list."""
    evidence = []
    
    # Add evidence from each component
    if profile.communication_style:
        evidence.extend(profile.communication_style.evidence)
    if profile.decision_making:
        evidence.extend(profile.decision_making.evidence)
    if profile.stress_response:
        evidence.extend(profile.stress_response.evidence)
    if profile.leadership_potential:
        evidence.extend(profile.leadership_potential.evidence)
    if profile.team_dynamics:
        evidence.extend(profile.team_dynamics.evidence)
    
    # Format evidence with bullet points
    return "\n".join(f"- {item}" for item in evidence) 